*********	COMANDOS POSTGRE_SQL	********

Video: CursoPostgre part: 12:45

- Conocer todos los comandos y sus guias.
# \?

- Listar todas las bases de datos.
# \l

- Acceder a la bases de datos.
# \c <name_database>

- Listar todas las tablas.
# \dt

- Describir bases tablas.
# \d <name_table>

- Si necesitamos ayuda en algun comando que tengas en dudad. Ver todas las funciones que podemos utilizar siendo comandos SQL.
# \h

- Si tenemos duda de como se utiliza alguna funcion.
# \h <name_funcion_comando>

- Que version esta ejecutando en la BD. (Verificar que es mejor poner los comandos de SQL en mayuscula)
# SELECT version();

- 2 Comandos utiles para encontrar cualquier problema con la interfaz grafica.
    (\g) te permite ejeuctar la ultima funcion que acabas de utilizar en la consola.
# \g
    
    (\timing) cuando queremos optimizar la BD, con esta funcion podemos inicializar el tiempo que en cada ejecucion cuanto se demoro en ejecutar ese comando.
# \timing  (podemos visualizar que en cada ejecucion aparece un tiempo 

-----------------------------------------------------------------------
ARCHIVOS DE CONFIGURACION 

- postgresql.conf
- pg_hba.cong
- pg_ident.conf

- Saber donde estan nuestros archivos de configuracion.
# SHOW config_file;
-----------------------------------------------------------------------
*** COMANDOS DE NAVEGACION & CONSULTA DE INFORMACION ***

- Listar los esquemas de la base de datos actual.
# \dn

- Listar las funciones disponibles de la base de datos actual.
# \df

- Listar las vistas de la base de datos actual.
# \dv

- Listar los usuarios y sus roles de la base de datos actual.
# \du
-----------------------------------------------------------------------
*** COMANDOS DE INSPECCION Y EJECUCION ***

-  Volver a ejecutar el comando ejecutando justo antes.
# \g

-  Ver el historial de comandos ejecutados.
# \s

- Si se quiere guardar la lista de comandos ejecutados en un archivo de texto plano.
# \s <nombre_archivo>

- Ejecutar los comandos desde un archivo.
# \i <name_archivo>

- Permite abrir un editor de texto plano, escribir comomandos y ejecutar en lote. \e abre el editor de texto, escribir allí todos los comandos, luego guardar los cambios y cerrar, al cerrar se ejecutarán todos los comandos guardados.
# \e

- Equivalente al comando anterior pero permite editar tambien funciones de PostgreSQL.
# \ef
-----------------------------------------------------------------------
***  COMANDOS PARA DEBUG Y OPTIMIZACIÓN  ***

- Activar / Desactivar el contador de tiempo por consulta.
# \timing

-----------------------------------------------------------------------
***  COMANDOS PARA CERRAR LA CONSOLA  ***

- Cerrar la consola.
# \q

-----------------------------------------------------------------------
***  COMANDOS BASICOS DE CRUD  ***

- Crear BB.
# CREATE DATABASE <name_new_db>;

- Crear table.
# CREATE TABLE <name_new_table> (name_columns valor);

- INSERCION DE DATOS.
# INSERT INTO <name_table> (<name_column>, <name_column> VALUES (<'valor_column1'>, <valor_column2>);

- Consultamos ahora los datos en la tabla:
# SELECT * FROM <name_table>;

- Modificar valor.
# UPDATE <name_table> SET <name_table> = <new_value> WHERE <name_table> = <valor_correspondiente>;

- Borrar registro.
# DELETE FROM <name_table> WHERE <condicion>;

- Realizar encriptacion de un texto usando el algoritmo md5.
# SELECT MD5 ('Vamos a encriptar este texto que leo');
-----------------------------------------------------------------------
***  TIPOS DE DATOS ***

Numericos
Monetarios
Texto
Binarios
Fecha / Hora
Boolean

- Formatos especiales de PostgreSQL
Geometricos
Direccion de Red
Texto tipo bit
XML,json
Arreglos
-----------------------------------------------------------------------
*** ROLES en la BD ***

Los roles como cualquier objeto de la BD tiene la capacidad de ser
creador o eliminados, sin embargo los roles tienen una caracteristica
especial y es que pueden crear o eliminar otros roles, tienen atributos
quiere decir que pueden hacer login o no, pueden acceder a la BD, pueden
eliminar tablas, los roles pueden ser agrupados bajo un conjunto global
de permisos y los roles existen de manera predeterminada en postgres.

(Los roles son independientes a las BD)

- Consulta para crear un Role.
# CREATE ROLE <name_rol> caracteristicas;

- Ver todas las funciones de CREATE ROLE.
# \h CREATE ROLE

- Vamos a crear un rol con la capacidad de hacer login y asignar la contraseña. (este usuario va a tener acceso de lectura, insertar y actualizar consulta.
# CREATE ROLE usuario_consulta; (asi lo creamos sin contraseña y con todas las caracteristicas)

- Ver todos los usuarios creados.
# \dg

- Ahora queremos que este rol tenga la capacidad de acceder a la BD, asi que lo tenemos que modificar.
# ALTER ROLE usuario_consulta WITH LOGIN;

- Ahora que tenga la capacidad de ser superusuario.
# ALTER ROLE usuario_consulta WITH SUPERUSER;

- Tenemos que agregarle a nuestro usuario contraseña para que el pueda acceder a la BD.
# ALTER ROLE <name_role> WITH PASSWORD '<contraseña en comillas simples';

- Borrar usuarios
(Para eliminar usuarios tenemos que cerrar la sesion que tenemos abierta y, iniciamos desde la sesion de postgres'
# DROP ROLE <name_role>;

- CAMBIAR NOMBRE DEL USUARIO.
# ALTER ROLE <name_user> RENAME TO <new_name_role>;